import { ICstVisitor } from "chevrotain";
import { CronExpression, Expression, StringLiteral, SyntaxNode } from "@/common/syntax";
import { AtomicExprContext, CronExpressionContext, ExpressionContext, ExprNotUnionContext, OperationContext } from "./context";
export declare type AbstractVisitor = ICstVisitor<any, any>;
export declare type AbstractVisitorConstructor = new (...args: any[]) => AbstractVisitor;
declare const abstractVisitor: <T extends AbstractVisitorConstructor>(base: T) => {
    new (...args: any[]): {
        cronExpression(ctx: CronExpressionContext): CronExpression;
        expression(ctx: ExpressionContext): Expression;
        exprNotUnion(ctx: ExprNotUnionContext): any;
        atomicExpr(ctx: AtomicExprContext, lhs: StringLiteral): SyntaxNode;
        interval(ctx: OperationContext): StringLiteral;
        range(ctx: OperationContext): StringLiteral;
        visit(cstNode: import("chevrotain").CstNode | import("chevrotain").CstNode[], param?: any): any;
        validateVisitor(): void;
    };
} & T;
export default abstractVisitor;
