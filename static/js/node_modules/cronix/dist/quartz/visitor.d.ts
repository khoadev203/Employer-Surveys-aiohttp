import { StringLiteral } from "@/common/syntax";
import { DayOfWeekExpr, QuartzCronExpression } from "./syntax";
import { DowContext, QuartzCronExpressionContext, QuartzExprNotUnionContext } from "./context";
declare const QuartzVisitorConstructor: {
    new (...args: any[]): {
        cronExpression(ctx: import("..").CronExpressionContext): import("../common/syntax").CronExpression;
        expression(ctx: import("..").ExpressionContext): import("../common/syntax").Expression;
        exprNotUnion(ctx: import("..").ExprNotUnionContext): any;
        atomicExpr(ctx: import("..").AtomicExprContext, lhs: StringLiteral): import("../common/syntax").SyntaxNode;
        interval(ctx: import("..").OperationContext): StringLiteral;
        range(ctx: import("..").OperationContext): StringLiteral;
        visit(cstNode: import("chevrotain").CstNode | import("chevrotain").CstNode[], param?: any): any;
        validateVisitor(): void;
    };
} & (new (...args: any[]) => import("chevrotain").ICstVisitor<any, any>);
export declare class QuartzVisitor extends QuartzVisitorConstructor {
    constructor();
    cronExpression(ctx: QuartzCronExpressionContext): QuartzCronExpression;
    exprNotUnion(ctx: QuartzExprNotUnionContext): any;
    dow(ctx: DowContext, lhs: StringLiteral): DayOfWeekExpr;
}
export {};
